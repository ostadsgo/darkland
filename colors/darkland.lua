vim.cmd("hi clear")
if vim.fn.exists("syntax_on") == 1 then
  vim.cmd("syntax reset")
end

vim.g.colors_name = "darkland"

local opts = {
  transparent = false,
  styles = {
    comments = {},
    functions = {},
    keywords = {},
    lsp = { underline = false },
    match_paren = {},
    type = { bold = false },
    variables = {},
  },
}

local colors = {
  bg = "#100F0F",
  fg = "#d6d6d6",
  gray = "#474747",
  keyword = "#FFD369", -- purpble / blue
  string = "#16a34a", -- yellow / green
  comment = "#A27B5C",
}

local c = {
  none = "NONE",
  fg = colors.fg,
  bg = colors.bg,
  alt_bg = "#171717",
  accent = "#202020",
  -- gray
  gray = colors.gray,
  medium_gray = "#727272",
  light_gray = "#AFAFAF",
  -- blue
  gray_blue = colors.keyword,
  medium_gray_blue = colors.string,
  blue = "#BAD7FF",
  cyan = colors.fg,
  green = "#90A959",
  red = "#C84B31",
  yellow = "#F4BF75",
  orange = "#BC5215",
  purple = "#AA749F",
  magenta = "#AA759F",
  cursor_fg = "#151515",
  cursor_bg = "#D0D0D0",
  sign_add = "#586935",
  sign_change = "#51657B",
  sign_delete = "#984936",
  error = "#984936",
  warning = "#ab8550",
  info = "#ab8550",
  hint = "#576f82",
  todo = "#578266",
  accent_blue = "#191a20",
  accent_green = "#1c2019",
  accent_red = "#F05454",
}

local theme = {
  Normal = {
    fg = c.fg,
    bg = opts.transparent and c.none or c.bg,
  },
  SignColumn = { bg = opts.transparent and c.none or c.bg },
  MsgArea = {
    fg = c.fg,
    bg = opts.transparent and c.none or c.bg,
  },
  ModeMsg = { fg = c.fg, bg = c.bg },
  MsgSeparator = { fg = c.fg, bg = c.bg },
  SpellBad = { sp = c.error, undercurl = true },
  SpellCap = { sp = c.yellow, undercurl = true },
  SpellLocal = { sp = c.sign_add, undercurl = true },
  SpellRare = { sp = c.purple, undercurl = true },
  NormalNC = {
    fg = c.fg,
    bg = opts.transparent and c.none or c.bg,
  },
  Pmenu = { fg = c.light_gray, bg = c.accent },
  PmenuSel = { fg = c.blue, bg = c.alt_bg },
  WildMenu = { fg = c.blue, bg = c.alt_bg },
  CursorLineNr = {
    fg = c.light_gray,
    bold = true,
  },
  Comment = vim.tbl_extend("force", { fg = colors.comment }, opts.styles.comments),
  Folded = { fg = c.light_gray, bg = c.alt_bg },
  FoldColumn = { fg = c.light_gray, bg = c.alt_bg },
  LineNr = { fg = c.gray },
  Whitespace = { fg = c.gray },
  VertSplit = { fg = c.bg, bg = c.accent },
  CursorLine = {
    bg = c.alt_bg,
  },
  CursorColumn = { bg = c.alt_bg },
  ColorColumn = { bg = c.alt_bg },
  NormalFloat = {
    bg = opts.transparent and c.none or c.alt_bg,
  },
  Visual = { bg = c.gray },
  VisualNOS = { bg = c.alt_bg },
  WarningMsg = { fg = c.error, bg = c.bg },
  DiffAdd = { bg = c.accent_green },
  DiffText = { bg = c.accent_blue },
  DiffChange = {
    fg = c.sign_change,
    bg = c.accent_blue,
  },
  DiffDelete = { fg = c.sign_delete, bg = c.accent_red },
  QuickFixLine = { bg = c.accent },
  PmenuSbar = { bg = c.alt_bg },
  PmenuThumb = { bg = c.light_gray },
  MatchWord = { underline = true },
  MatchParen = vim.tbl_extend("force", { fg = c.blue, bg = c.bg, underline = true }, opts.styles.match_paren),
  MatchWordCur = { underline = true },
  MatchParenCur = { underline = true },
  Cursor = { fg = c.cursor_fg, bg = c.cursor_bg },
  lCursor = { fg = c.cursor_fg, bg = c.cursor_bg },
  CursorIM = { fg = c.cursor_fg, bg = c.cursor_bg },
  TermCursor = {
    fg = c.cursor_fg,
    bg = c.cursor_bg,
    reverse = false,
  },
  TermCursorNC = {
    fg = c.alt_bg,
    reverse = false,
  },
  Conceal = { fg = c.fg },
  Directory = { fg = c.blue },
  SpecialKey = { fg = c.blue },
  Title = { fg = c.blue },
  ErrorMsg = { fg = c.error, bg = c.bg, bold = true },
  Search = { fg = c.orange, bg = c.alt_bg },
  IncSearch = { fg = c.alt_bg, bg = c.orange },
  Substitute = { fg = c.alt_bg, bg = c.orange },
  MoreMsg = { fg = c.cyan },
  Question = { fg = c.cyan },
  EndOfBuffer = { fg = c.gray },
  NonText = { fg = c.fg },
  Variable = vim.tbl_extend("force", { fg = c.white }, opts.styles.variables),
  String = { fg = c.medium_gray_blue },
  Character = { fg = c.green },
  Constant = { fg = c.white },
  Number = { fg = c.red },
  Boolean = { fg = c.red },
  Float = { fg = c.red },
  Identifier = { fg = c.white },
  Function = vim.tbl_extend("force", { fg = c.cyan }, opts.styles.functions),
  Operator = { fg = c.white },
  Type = vim.tbl_extend("force", { fg = c.white }, opts.styles.type),
  StorageClass = { fg = c.gray_blue },
  Structure = { fg = c.gray_blue },
  Typedef = { fg = c.white },
  Keyword = vim.tbl_extend("force", { fg = c.gray_blue }, opts.styles.keywords),
  Statement = { fg = c.gray_blue },
  Conditional = { fg = c.gray_blue },
  Repeat = { fg = c.gray_blue },
  Label = { fg = c.white },
  Exception = { fg = c.red },
  Include = { fg = c.gray_blue },
  PreProc = { fg = c.white },
  Define = { fg = c.red },
  Macro = { fg = c.cyan },
  PreCondit = { fg = c.medium_gray },
  Special = { fg = c.white },
  SpecialChar = { fg = c.medium_gray_blue },
  Tag = { fg = c.gray_blue },
  Debug = { fg = c.red },
  Delimiter = { fg = c.white },
  SpecialComment = vim.tbl_extend("force", { fg = c.medium_gray }, opts.styles.comments),
  Underlined = { underline = true },
  Bold = { bold = true },
  Italic = { italic = true },
  Ignore = { fg = c.cyan, bg = c.bg, bold = true },
  Todo = { fg = c.red, bg = c.bg, bold = true },
  Error = { fg = c.error, bg = c.bg, bold = true },
  TabLine = { fg = c.gray, bg = c.alt_bg },
  TabLineSel = { fg = c.white, bg = c.alt_bg },
  TabLineFill = { fg = c.white, bg = c.alt_bg },
  WinSeparator = { fg = c.medium_gray, bg = c.bg },
  DiagnosticFloatingError = { fg = c.error },
  FloatBorder = { fg = c.light_gray },

  -- Treesitter
  ["@annotation"] = { fg = c.white },
  ["@attribute"] = { fg = c.white },
  ["@boolean"] = { fg = c.red },
  ["@character"] = { fg = c.green },
  ["@comment"] = { link = "Comment" },
  ["@comment.documentation"] = { fg = c.medium_gray },
  ["@comment.error"] = { fg = c.error },
  ["@comment.note"] = { fg = c.light_gray },
  ["@comment.todo"] = { fg = c.todo },
  ["@comment.warning"] = { fg = c.warning },
  ["@const.builtin"] = { fg = c.red },
  ["@const.macro"] = { fg = c.cyan },
  ["@constant"] = { fg = c.white },
  ["@constructor"] = { fg = c.cyan },
  ["@error"] = { fg = c.error },
  ["@function"] = vim.tbl_extend("force", { fg = c.cyan }, opts.styles.functions),
  ["@function.builtin"] = { fg = c.cyan },
  ["@function.macro"] = { fg = c.cyan },
  ["@function.method"] = { fg = c.cyan },
  ["@function.method.call"] = { fg = c.cyan },
  ["@keyword"] = vim.tbl_extend("force", { fg = c.gray_blue }, opts.styles.keywords),
  ["@keyword.conditional"] = { fg = c.gray_blue },
  ["@keyword.coroutine"] = { fg = c.gray_blue },
  ["@keyword.exception"] = { fg = c.gray_blue },
  ["@keyword.function"] = vim.tbl_extend("force", { fg = c.gray_blue }, opts.styles.keywords),
  ["@keyword.import"] = { fg = c.gray_blue },
  ["@keyword.operator"] = { fg = c.gray_blue },
  ["@keyword.repeat"] = { fg = c.gray_blue },
  ["@label"] = { fg = c.white },
  ["@lsp.type.comment"] = {},
  ["@markup"] = { fg = c.fg },
  ["@markup.italic"] = { italic = true },
  ["@markup.link"] = { fg = c.medium_gray_blue },
  ["@markup.list"] = { fg = c.fg },
  ["@markup.list.unchecked"] = { fg = c.fg },
  ["@markup.literal"] = { fg = c.medium_gray },
  ["@markup.strong"] = { fg = c.medium_gray },
  ["@markup.title"] = { fg = c.medium_gray },
  ["@markup.underline"] = { underline = true },
  ["@module"] = { fg = c.white },
  ["@number"] = { fg = c.red },
  ["@number.float"] = { fg = c.red },
  ["@operator"] = { fg = c.white },
  ["@property"] = { fg = c.white },
  ["@punctuation.bracket"] = { fg = c.medium_gray },
  ["@punctuation.delimiter"] = { fg = c.medium_gray },
  ["@string"] = { fg = c.medium_gray_blue },
  ["@string.escape"] = { fg = c.medium_gray_blue },
  ["@string.regexp"] = { fg = c.medium_gray_blue },
  ["@string.special.symbol"] = { fg = c.medium_gray },
  ["@tag"] = { fg = c.gray_blue },
  ["@tag.attribute"] = { fg = c.white },
  ["@tag.delimiter"] = { fg = c.medium_gray },
  ["@type"] = vim.tbl_extend("force", { fg = c.white }, opts.styles.type),
  ["@type.builtin"] = { fg = c.white },
  ["@variable"] = vim.tbl_extend("force", { fg = c.white }, opts.styles.variables),
  ["@variable.builtin"] = { fg = c.white },
  ["@variable.field"] = { fg = c.white },
  ["@variable.parameter"] = { fg = c.white },
  ["@variable.parameter.reference"] = { fg = c.white },

  -- Telescop
  TelescopeNormal = {
    fg = c.fg,
    bg = opts.transparent and c.none or c.bg,
  },
  TelescopeSelection = { fg = c.fg, bg = c.accent },
  TelescopeMatching = { fg = c.orange, bold = true },
  TelescopeBorder = {
    fg = c.light_gray,
    bg = opts.transparent and c.none or c.bg,
  },

  -- LSP
  LspReferenceRead = { bg = "#36383F" },
  LspReferenceText = { bg = "#36383F" },
  LspReferenceWrite = { bg = "#36383f" },
  DiagnosticError = { fg = c.error },
  DiagnosticWarn = { fg = c.warning },
  DiagnosticInfo = { fg = c.info },
  DiagnosticHint = { fg = c.hint },
  DiagnosticVirtualTextError = { fg = c.error },
  DiagnosticVirtualTextWarn = { fg = c.warning },
  DiagnosticVirtualTextInfo = { fg = c.info },
  DiagnosticVirtualTextHint = { fg = c.hint },
  DiagnosticUnderlineError = vim.tbl_extend("force", { sp = c.error }, opts.styles.lsp),
  DiagnosticUnderlineWarn = vim.tbl_extend("force", { sp = c.warning }, opts.styles.lsp),
  DiagnosticUnderlineInfo = vim.tbl_extend("force", { sp = c.info }, opts.styles.lsp),
  DiagnosticUnderlineHint = vim.tbl_extend("force", { sp = c.hint }, opts.styles.lsp),
  LspSignatureActiveParameter = { bg = c.alt_bg, bold = true },
  LspCodeLens = { fg = c.comment },
  LspInlayHint = { bg = c.hint },
  LspInfoBoarder = { fg = c.light_gray, bg = c.hint },

  -- Lazy
  LazyButton = { fg = c.fg },
  LazyButtonActive = { fg = c.fg, bold = true },
  LazyComment = { fg = c.medium_gray },
  LazyCommit = { fg = c.white },
  LazyCommitIssue = { fg = c.red },
  LazyCommitScope = { fg = c.cyan },
  LazyCommitType = { fg = c.cyan },
  LazyDimmed = { fg = c.medium_gray },
  LazyDir = { fg = c.gray_blue },
  LazyH1 = { fg = c.fg, bold = true },
  LazyH2 = { fg = c.fg },
  LazyNoCond = { fg = c.blue },
  LazyNormal = { fg = c.fg },
  LazyProgressDone = { fg = c.cursor_fg },
  LazyProgressTodo = { fg = c.gray },
  LazyProp = { fg = c.fg },
  LazyReasonCmd = { fg = c.fg },
  LazyReasonEvent = { fg = c.fg },
  LazyReasonFt = { fg = c.green },
  LazyReasonImport = { fg = c.fg },
  LazyReasonKeys = { fg = c.gray_blue },
  LazyReasonPlugin = { fg = c.fg },
  LazyReasonRuntime = { fg = c.fg },
  LazyReasonSource = { fg = c.fg },
  LazyReasonStart = { fg = c.fg },
  LazySpecial = { fg = c.fg },
  LazyTaskError = { fg = c.red },
  LazyTaskOutput = { fg = c.medium_gray },
  LazyUrl = { fg = c.gray_blue },
  LazyValue = { fg = c.medium_gray_blue },
}

for group, hl in pairs(theme) do
  vim.api.nvim_set_hl(0, group, hl)
end
